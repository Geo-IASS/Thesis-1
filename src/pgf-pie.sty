%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some LaTeX macros for pie chart by using PGF/Tikz package.
% 
% I made some modifications to the original project to make it more suitable for
% my purpose. The following details pertain to the original project:
%
% Home page of project: http://pgf-pie.googlecode.com/
% Author: Xu Yuan <xuyuan.cn@gmail.com>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{pgf-pie}

\RequirePackage{tikz}
\RequirePackage{ifthen}
\RequirePackage{scalefnt}

% args:
% #1: begin angle
% #2: end angle
% #3: number
% #4: label
% #5: explode
% #6: fill color
% #7: radius
% #8: center
\newcommand\pgfpie@slice[8]{%
    \ifthenelse{\equal{#1}{#2}}{}{%
        \pgfmathparse{0.5*(#1)+0.5*(#2)}%
        \let\midangle\pgfmathresult
        %
        \path (#8) -- ++(\midangle:#5) coordinate(O);%
        %
        \pgfmathparse{#7+#5}%
        \let\radius\pgfmathresult
        %
        % slice
        \draw[line join=round, fill=#6, \style] (O) -- ++(#1:#7) arc (#1:#2:#7) -- cycle;%
        %
        \pgfmathparse{min(((#2)-(#1)-10)/110*(-0.3),0)}%
        \let\temp\pgfmathresult%
        \pgfmathparse{(max(\temp,-0.5) + 0.8)*#7}%
        \let\innerpos\pgfmathresult
        %
        \ifthenelse{\equal{\pgfpie@text}{inside}}{%
            \ifthenelse{\equal{\pgfpie@number}{inside}}{%
                % label and number together
                \path (O) -- ++(\midangle:\innerpos) node%
                {\scalefont{#3}\shortstack{#4\\\beforenumber#3\afternumber}};%
            }{%
                % label only
                \path (O) -- ++(\midangle:\innerpos) node%
                {\scalefont{#3}\shortstack{#4}};%
            }%
        }{%
            % label
            \ifthenelse{\equal{\pgfpie@text}{inside}}{%
                \path (O) -- ++ (\midangle:\radius)%
                node[inner sep=0, \pgfpie@text=\midangle:#4]{};%
            }%
            {}%
            %
            % number
            \ifthenelse{\equal{\pgfpie@number}{inside}}{%
                \path (O) -- ++(\midangle:\innerpos) node%
                {\scalefont{#3}\beforenumber#3\afternumber};%
            }%
            {}%
        }%
    }%
}

\newcommand\pgfpie@findColor[1]{%
    \pgfmathparse{int(mod(#1,\value{pgfpie@colorLength}))}%
    \let\ci\pgfmathresult
    \foreach \c [count=\j from 0] in \color {%
        \ifnum \j=\ci
            \xdef\thecolor{\c}%
            \thecolor
            \breakforeach
        \fi
    }%
}

\newcommand\pgfpie@findExplode[1]{%
    \pgfmathparse{int(mod(#1,\value{pgfpie@explodeLength}))}%
    \let\ei\pgfmathresult
    \foreach \e [count=\j from 0] in \explode {%
        \ifnum \j=\ei
            \xdef\theexplode{\e}%
            \breakforeach
        \fi
    }%
}

\newlength{\pgfpie@angleEnd}
\newcounter{pgfpie@explodeLength}
\newcounter{pgfpie@colorLength}
\newcounter{pgfpie@sliceLength}

\def\setexplode#1\pgfeov{\def\explode{#1}}
\pgfkeyslet{/explode/.@cmd}{\setexplode}

\def\setcolor#1\pgfeov{\def\color{#1}}
\pgfkeyslet{/color/.@cmd}{\setcolor}

\def\setradius#1\pgfeov{\def\radius{#1}}
\pgfkeyslet{/radius/.@cmd}{\setradius}

\def\setpos#1\pgfeov{\def\pos{#1}}
\pgfkeyslet{/pos/.@cmd}{\setpos}

\def\setstyle#1\pgfeov{\def\style{#1}}
\pgfkeyslet{/style/.@cmd}{\setstyle}

\def\setbeforenumber#1\pgfeov{\def\beforenumber{#1}}
\pgfkeyslet{/before number/.@cmd}{\setbeforenumber}

\def\settext#1\pgfeov{\xdef\pgfpie@number{#1}}
\pgfkeyslet{/number/.@cmd}{\settext}

\def\setafternumber#1\pgfeov{\def\afternumber{#1}}
\pgfkeyslet{/after number/.@cmd}{\setafternumber}

\def\settext#1\pgfeov{\xdef\pgfpie@text{#1}}
\pgfkeyslet{/text/.@cmd}{\settext}

\def\setnumber#1\pgfeov{\xdef\pgfpie@number{#1}}
\pgfkeyslet{/number/.@cmd}{\setnumber}

\def\setsum#1\pgfeov{\xdef\pgfpie@sum{#1}}
\pgfkeyslet{/sum/.@cmd}{\setsum}

\def\setrotate#1\pgfeov{\xdef\rotate{#1}}
\pgfkeyslet{/rotate/.@cmd}{\setrotate}

\newif\ifbound
\pgfkeys{/bound/.is if=bound}

\newif\ifscalefont
\pgfkeys{/scale font/.is if=scalefont}
\let\scalefontorg\scalefont
\renewcommand{\scalefont}[1]{%
    \ifscalefont
        \pgfmathparse{#1 / \pgfpie@sum * 3 + 0.9}%
        \scalefontorg{\pgfmathresult}%
    \fi
}

\newcommand\pie[2][]{%
    % load default parameters
    \pgfkeys{%
        explode=0,%
        color={blue!60, cyan!60, yellow!60, orange!60, red!60,%
               blue!60!cyan!60, cyan!60!yellow!60, red!60!cyan!60,%
               red!60!blue!60, orange!60!cyan!60},%
        radius=3,%
        pos={0,0},%
        style={thick},%
        before number=,%
        after number=,%
        text=label,%
        number=inside,%
        sum=100,%
        rotate=0,%
        scale font=false,%
        bound=false,%
    }%
    %
    % load user's parameters
    \pgfkeys{#1}%
    %
    % add percentage automatically
    \ifthenelse{\equal{\pgfpie@sum}{100}}{%
        \pgfkeys{after number=\%}%
        \pgfkeys{#1}%
    }{}%
    %
    % handle sum
    \ifthenelse{\equal{\pgfpie@sum}{auto}}{%
        % sum all input
        \xdef\pgfpie@sum{0}%
        \foreach \p/\t in {#2}{%
            \pgfmathparse{\pgfpie@sum + \p}%
            \xdef\pgfpie@sum{\pgfmathresult}%
        }%
    }%
    {}%
    %
    % init counters
    \setcounter{pgfpie@explodeLength}{0}%
    \foreach \e in \explode { \addtocounter{pgfpie@explodeLength}{1} }%
    %
    \setcounter{pgfpie@colorLength}{0}%
    \foreach \c in \color { \addtocounter{pgfpie@colorLength}{1} }%
    %
    \pgfmathsetlength{\pgfpie@angleEnd}{0}%
    %
    \setcounter{pgfpie@sliceLength}{0}%
    \foreach \p/\e in {#2} { \addtocounter{pgfpie@sliceLength}{1} }%
    %
    %%%%%%%%%% CIRCLE PIE BEGIN %%%%%%%%%%%
    \xdef\theradius{\radius}%
    %
    \xdef\pgfpie@angleBegin{\the\pgfpie@angleEnd}%
    % drawing loop
    \foreach \p/\t [count=\i from 0] in {#2}{%
        \pgfmathsetlength{\pgfpie@angleEnd}{\pgfpie@angleBegin}%
        \pgfmathaddtolength{\pgfpie@angleEnd}{\p}%
        %
        % find explode
        \pgfpie@findExplode{\i}%
        %
        % find color
        \pgfpie@findColor{\i}%
        \pgfpie@slice{\pgfpie@angleBegin/\pgfpie@sum*360+\rotate}%
        {\the\pgfpie@angleEnd/\pgfpie@sum*360+\rotate}%
        {\p}%
        {\t}%
        {\theexplode}%
        {\thecolor}%
        {\theradius}%
        {\pos}%
        \xdef\pgfpie@angleBegin{\the\pgfpie@angleEnd}%
    }%
    %%%%%%%%%% CIRCLE PIE END %%%%%%%%%%%
    %
    % legend
    \ifthenelse{\equal{\pgfpie@text}{legend}}{%
        \coordinate[xshift=0.8cm,yshift=(\value{pgfpie@sliceLength}*0.5+1)*0.5cm] (legendpos) at (current bounding box.east);%
        %
        \begin{scope}[node distance=0.5cm]%
            \foreach \p/\t  [count=\i from 0] in {#2}{%
                \pgfpie@findColor{\i}%
                \node[draw, fill=\thecolor, \style, below of=legendpos, label=0:\t] (legendpos) {};%
            }%
        \end{scope}%
    }%
    {}%
    %
    % bounding box
    \ifbound
        \pgfresetboundingbox
        \path[use as bounding box] ($(\pos)-(\theradius,\theradius)$) rectangle ($(\pos)+(\theradius,\theradius)$);%
    \fi
}

\newcommand\pielegend[2][]{%
    % load default parameters
    \pgfkeys{%
        color={blue!60, cyan!60, yellow!60, orange!60, red!60,%
               blue!60!cyan!60, cyan!60!yellow!60, red!60!cyan!60,%
               red!60!blue!60, orange!60!cyan!60},%
        pos={0,0},%
        style={thick},%
        bound=false,%
    }%
    %
    % load user's parameters
    \pgfkeys{#1}%
    %
    %
    % init counters
    \setcounter{pgfpie@colorLength}{0}%
    \foreach \c in \color { \addtocounter{pgfpie@colorLength}{1} }%
    %
    \setcounter{pgfpie@sliceLength}{0}%
    \foreach \p/\e in {#2} { \addtocounter{pgfpie@sliceLength}{1} }%
    %
    % legend
    \coordinate[xshift=0.8cm,yshift=(\value{pgfpie@sliceLength}*0.5+1)*0.5cm] (legendpos) at (current bounding box.east);%
    %
    \begin{scope}[node distance=0.5cm]%
        \foreach \p/\t  [count=\i from 0] in {#2}{%
            \pgfpie@findColor{\i}%
            \node[draw, fill=\thecolor, \style, below of=legendpos, label=0:\t] (legendpos) {};%
        }%
    \end{scope}%
    %
    % bounding box
    \ifbound
        %\pgfresetboundingbox
        %\path[use as bounding box] ($(\pos)-(\theradius,\theradius)$) rectangle ($(\pos)+(\theradius,\theradius)$);%
    \fi
}
